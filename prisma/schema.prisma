generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  username       String            @unique
  email          String            @unique
  password       String
  role           Role              @default(USER)
  emailConfirm   Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  countries      Country[]
  writtenReviews Review[]          @relation("writtenReviews")
  comments       Comment[]
  likes          UserReview[]
  savedCountries UserSaveCountry[]

  @@map("users")
}

model Country {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  name       String            @unique
  images     String[]
  about      String
  facts      String[]
  language   String[]
  currency   String
  climate    String
  population String
  capital    String
  continent  String
  topCities  String[]
  activities String[]
  whenToGo   String
  createdAt  DateTime          @default(now())
  updatedBy  String[]
  reviews    Review[]
  user       User              @relation(fields: [userId], references: [id])
  userId     String            @db.ObjectId
  savedBy    UserSaveCountry[]

  @@map("countries")
}

model Review {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String?
  rate      String
  body      String
  date      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  country   Country      @relation(fields: [countryId], references: [id])
  countryId String       @db.ObjectId
  author    User         @relation(name: "writtenReviews", fields: [authorId], references: [id])
  authorId  String       @db.ObjectId
  comments  Comment[]
  likedBy   UserReview[]

  @@map("reviews")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.ObjectId

  @@map("comments")
}

model UserReview {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User?   @relation(fields: [userId], references: [id])
  review   Review? @relation(fields: [reviewId], references: [id])
  userId   String? @db.ObjectId
  reviewId String  @db.ObjectId
}

model UserSaveCountry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  country   Country? @relation(fields: [countryId], references: [id])
  userId    String?  @db.ObjectId
  countryId String   @db.ObjectId
}

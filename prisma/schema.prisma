generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  username       String    @unique
  email          String    @unique
  password       String
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  countries      Country[]
  writtenReviews Review[]  @relation("writtenReviews")
  comments       Comment[]
  //replies        Reply[]

  savedCountries Country[] @relation("savedCountries")
  likedReviews   Review[]  @relation("likedReviews")
  //likedComments  Comment[] @relation("likedComments")
  // likedReplies Reply[] @relation("likedReplies")
  //fazer uma parte de chat, caso um user queira falar com outro

  @@map("users")
}

model Country {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  images     String[]
  about      String
  facts      String[]
  language   String[]
  currency   String
  climate    String
  population String
  capital    String
  continent  String
  topCities  String[]
  activities String[]
  whenToGo   String
  createdAt  DateTime @default(now())
  updatedBy  String[]
  reviews    Review[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  savedBy    User?    @relation("savedCountries", fields: [savedById], references: [id])
  savedById  String?  @db.ObjectId

  @@map("countries")
}

model Review {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String?
  rate      String
  body      String
  date      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  country   Country   @relation(fields: [countryId], references: [id])
  countryId String    @db.ObjectId
  author    User      @relation(name: "writtenReviews", fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likedBy   User?     @relation(name: "likedReviews", fields: [likedById], references: [id])
  likedById String?   @db.ObjectId
  comments  Comment[]

  @@map("reviews")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.ObjectId
  // likedBy   User     @relation(name: "likedComments", fields: [likedById], references: [id])
  // likedById String   @db.ObjectId
  //replies   Reply[]

  @@map("comments")
}

// model Reply {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   body      String
//   createdAt DateTime @default(now())
//   authorId  String   @db.ObjectId
//   author    User     @relation(fields: [authorId], references: [id])
//   commentId String   @db.ObjectId
//   comment   Comment  @relation(fields: [commentId], references: [id])

//   @@map("replies")
// }
